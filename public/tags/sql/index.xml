<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sql on Danabases</title><link>localhost/tags/sql/</link><description>Recent content in Sql on Danabases</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener"&gt;CC BY-NC 4.0&lt;/a&gt;</copyright><lastBuildDate>Wed, 02 Jul 2025 14:59:44 -0700</lastBuildDate><atom:link href="localhost/tags/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>Easy Postgres Installation and Setup on Windows with Chocolatey</title><link>localhost/posts/2020-2-15-postgres-chocolatey/</link><pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate><guid>localhost/posts/2020-2-15-postgres-chocolatey/</guid><description>&lt;p&gt;This post will be demonstrating how to easily install, configure and update a PostgreSQL instance on Windows, specifically via the &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; package manager. Yes, you can always take the old school route by going to the &lt;a href="https://www.postgresql.org/download/"&gt;official Postgres website&lt;/a&gt;, and download an installer, followed by clicking through a wizard a bunch of times. However, using a package manager makes it easier to install, and much easier to update regularly.&lt;/p&gt;
&lt;h2 id="installing-chocolatey"&gt;Installing Chocolatey&lt;/h2&gt;
&lt;p&gt;To install Chocolatey, you will first need to open a Powershell terminal, specifically in admin mode. Next, run &lt;code&gt;Get-ExecutionPolicy&lt;/code&gt;. If it says &amp;ldquo;restricted&amp;rdquo;, then you will need to run either &lt;code&gt;Set-ExecutionPolicy AllSigned&lt;/code&gt; or &lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>Integrating JSONB Data into Django Projects</title><link>localhost/posts/2020-2-13-jsonb-django/</link><pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate><guid>localhost/posts/2020-2-13-jsonb-django/</guid><description>&lt;p&gt;This post follows up on my earlier post about &lt;a href="https://danabases.net/posts/2020-1-22-postgres-json/"&gt;storing json data in Postgres&lt;/a&gt;. In this article, I will be going over how to integrate the same &lt;code&gt;JSONB&lt;/code&gt; data I used in that post with a Django web application.&lt;/p&gt;
&lt;h2 id="modeling-the-data"&gt;Modeling the Data&lt;/h2&gt;
&lt;p&gt;Modeling &lt;code&gt;JSONB&lt;/code&gt; data with Django&amp;rsquo;s ORM tool is rather easy, as the framework has built in support for this in the &lt;code&gt;django.contrib&lt;/code&gt; module. Therefore, we would model our data like this in our &lt;code&gt;models.py&lt;/code&gt; file:&lt;/p&gt;</description></item><item><title>Storing and Querying JSON Data in PostgreSQL</title><link>localhost/posts/2020-1-22-postgres-json/</link><pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate><guid>localhost/posts/2020-1-22-postgres-json/</guid><description>&lt;p&gt;I recently started exploring how to store JSON data in a traditional relational
database management system (RDBMS), rather than a dedicated form of JSON/document
storage, like MongoDB. While I could write a lot more about the problems with
MongoDB, that&amp;rsquo;s not what I want to do here. Instead, I want to
focus primarily on how to store and query JSON in PostgreSQL. However, I
should note that PostgreSQL is not the only RDBMS that supports JSON storage.
I know that MariaDB also does, as of v10.2, and possibly other RDBMS as well. However,
since I have been mostly using and enjoying Postgres for awhile now,
I decided to focus on that, specifically.&lt;/p&gt;</description></item><item><title>Migrating Data to the Cloud with Python</title><link>localhost/posts/2020-1-16-migratingdatapython/</link><pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate><guid>localhost/posts/2020-1-16-migratingdatapython/</guid><description>&lt;p&gt;In the past year, or so, I have been experimenting with writing my own custom
ETL programs in Python. Among the functionality that I included was extracting
data from a local Postgres database, and migrating to a Postgres database in
the cloud.&lt;/p&gt;
&lt;h2 id="the-reasoning"&gt;The Reasoning&lt;/h2&gt;
&lt;p&gt;While I&amp;rsquo;m aware that platforms-as-a service (PaaS) like AWS, and
Azure provide their own services for this. Nevertheless, I opted to implement
my own solution for data migration(s). I decided on this course of action for
a couple reasons: 1) I saw it as a valuable learning experience for, and 2)
I also found it be a practical solution as well.&lt;/p&gt;</description></item></channel></rss>